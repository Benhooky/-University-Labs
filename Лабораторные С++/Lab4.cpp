
/*************************************************************
	Практическое занятие №3. Функции.
	Объявление, определение, вызов.
	Передача параметров. Возвращение значения.
	Указатели на функции
*************************************************************/
#include <iostream>
#include "vld.h"
#include <tchar.h>
#include <cstdio>
#include <cstdarg>
#include "other.h"
#include <ctime>
#include<cstring>
#include"other.cpp"


int _tmain()
{
	
	/////////////////////////////////////////////////////////////////////////////
	// Задание 1. Ссылки.
	//Объявите ссылку на тип double. Посредством ссылки измените значение
	double m=0;
	double& r = m;


	//Раскомментируйте  следующую строчку. Что следует сделать, чтобы
	//linker не выдавал ошибки при создании exe-файла. Подсказка: ref - это
	//внешняя по отношению к данному файлу ссылка!
	extern int& ref;
	ref++;




	//Раскомментируйте следующую строку. Что следует сделать, чтобы
	//компилятор не выдавал ошибки 
	const int& ref1 = 1;



	//Задан указатель:
	char c='A';
	char* pc = &c;
	//Объявите ссылку на указатель. Посредством ссылки измените
	//а) значение по адресу
	char*& ssilk = pc;
	*ssilk = 'B';
	//б) сам адрес
	ssilk++;
	

	

	//Задание 2. Отличия при передаче параметров а) по значению,
	// б) по ссылке, в) по указателю
	//Объявите и определите три функции , которые увеличивают заданное
	//с помощью параметра значение на 1 ( а) - IncByValue(),
	// б) - IncByPointer(), в) - IncByReference() ). 
	//Проверьте правильность с помощью отладчика.
	//
	//Замечание: объявления функций принято помещать в заголовочный файл
	int val =1;//значение этой переменной должно быть увеличено с помощью
				//каждой из функций на единицу
	val=incByValue(val);
	incByPointer(&val);
	incByReference(val);
	


	//Задание 2а. Передача параметров c помощью указателя и по ссылке. 
	//Перегруженные имена функций.
	//Создайте функцию (функции) Swap(), которая меняет значения
	//переменных nX и nY местами. 
	// а)Функция должна принимать два указателя на int, оперируя с 
	//которыми менять значения переменных в вызывающей программе
	// б)Функция должна принимать две ссылки на int 
	//Проверьте правильность с помощью приведенного ниже фрагмента.

	int	nX = 1;
	int nY = -1;
	int* p = &nX;
	int* pp = &nY;
	Swap(p ,pp);	//поменяли местами значения nX и nY с
						//помощью указателей на nX и nY
	Swap(nX ,nY);	//а теперь обратно с помощью ссылок на nX и nY


		//Задание 3. Указатели на массивы в качестве аргументов.
		//3a.Напишите два варианта функции поиска минимального элемента
		//1. во встроенном двухмерном массиве
		//2. в динамическом двухмерном массиве (обе размерности вычисляются)

		//1.Например:
	int ar[N][M] = {2,1,3,4};//подумайте - как и где должны быть заданы N и M
	int v = ar[0][0];
	int L = 4;
	int I = 2;
	int V = 0;
	int C = 0;
	std::cin >> V >> C;
	srand(time(0));
	int** arr = new int*[V];
	for (int i = 0; i < V; i++)
	{
		arr[i] = new int[C];
	}
	int a;
	for (int i = 0; i < V; i++)
	{
		for (int j = 0; j < C; j++)
		{
			arr[i][j] = rand()%23;
		}
	}
	for (int i = 0; i < V; i++)
	{
		for (int j = 0; j < C; j++)
		{
			std::cout<<' '<<arr[i][j];
		}
	}
	std::cout << std::endl;
	int res = Min(ar,v); 
	int Res = min(arr,V,C);
	for (int i = 0; i < V; i++)
	{
		delete[] arr[i];
	}
	delete[] arr;
	std::cout << res << ' '<<Res;


	//3b. Напишите функцию сравнения двух строк - MyStrCmp():
	//Функция должна принимать два указателя на сравниваемые
	//строки (возможно Вы должны указать компилятору, что функция
	//не имеет права модифицировать содержимое строк)
	//Функция должна возвращать отрицательное значение, если
	//первая строка лексиграфически меньше второй, 0 - если
	//они равны и положительное значение, если первая строка
	//больше второй.
	//Вспомните, что признаком конца строки является нулевой байт.

	
	//Создайте две строки для сравнения: 
	char string1[10];
	char string2[10];
	std::cin >> string1;
	std::cin >> string2;
	//Вызовите функцию сравнения
	int mawe = MyStrCmp(string1,string2,strlen(string1),strlen(string2));
	//Выведите результат сравнения с помощью cout:
	std::cout << mawe;


		//Задание 4.Ссылки в качестве параметров. Передача указателя на встроенный
		//массив в качестве параметра функции.
		//Напишите две взаимодополняющие друг друга функции:
		//1.  ... DayOfYear(...)
		//- преобразует день месяца (число,месяц и год задаются в качестве параметров)
		//в порядковый день года(возвращаемое значение)
		//2. ... DayOfMonth(...) - функция преобразует порядковый день года в день месяца
		// (принимает год и порядковый день года в качестве параметров и должна сформировать
		// день месяца и номер месяца и каким-то образом сообщить эти значения вызывающей процедуре)

		//Проверьте работоспособность обеих функций с помощью следующего фрагмента:

	int number;
	int month;
	int year;

	std::cin >> number>>month>>year;
	//В процессе вычислений Вам придется учитывать "високосный - невисокосный" год.
	//Для этого предлагается в каждую функцию в качестве одного из параметров передавать
	//данные приведенного ниже двухмерного массива nDayTab

	int nDayTab[2][12]={
		{31,28,31,30,31,30,31,31,30,31,30,31}, //невисокосный год
		{31,29,31,30,31,30,31,31,30,31,30,31}	};	//високосный год
	
	//Вызов функции DayOfYear
	//...
	int day = DayOfYear(number,month,year,nDayTab);
	int ray = DayOfMonth(day, year, nDayTab);
	//Проверка результата обратной функцией DayOfMonth
	//...
	std::cout << std::endl;
	std::cout << day << ' ' << ray+1;
		

		//Задание 5. Создайте одномерный массив (размерность вычисляется в процессе
		//выполнения программы), заполните его значениями.
		//Напишите функцию, которая добавляет в массив новое значение только при условии,
		//что такого значения в массиве еще нет. Подсказка: при этом размер
		//массива должен увеличиться!
		//Для проверки напишите функцию, которая выводит значения всех элементов на экран

	int R;
	std::cin >> R;
	int& vqwfaw= R;
	int *ab = new int[R];
	int* arrrr = &R;
	for (int i = 0; i < R; i++)
	{
		std::cin >> ab[i];
	}
	ab=newf(ab,R,arrrr);	
	ab = newf(ab, R, arrrr);
	ab = newf(ab, R, arrrr);
	printff(ab,R);
	delete[] ab;
	std::cout << std::endl;
	
	//Задание 6. Рекурсивные функции. Напишите рекурсивную функцию вычисления
	//суммы первых N натуральных чисел.

	int N;
	std::cin >> N;
	int res123=0;
	F(N,res123);
	std::cout << res123<<std::endl;
	


	//Задание 7а. Функции с переменным числом параметров.
	//Напишите функцию (дана заготовка VarArgs, не использующая
	// макросы), которая принимает переменное число аргументов
	// типа int и выводит на печать число принятых параметров и
	// их значения.
	// Признаком конца списка является нулевое значение.
	{
		int nN1 = 5, nN2 = 11, nN3 = 4, nN4 = 7, nN5 = -1, nole = 0;
		VarArgsss(nN1, 0);
		VarArgsss(nN1, nN2, 0);
		VarArgsss(nN1, nN2, nN3, nN4, nN5, 0);




		//Задание 7б. Модифицируйте функцию 5а с помощью макросов
		// va_start, va_arg, va_end


		macro(nN1, 0);
		macro(nN1, nN2, 0);
		macro(nN1, nN2, nN3, nN4, nN5, 0);
		std::cout << std::endl;
	}

		//Задание 8. Возвращение адреса.
		//Напишите функцию, которая находит минимальное значение в массиве,
		// таким образом, чтобы ее вызов можно было использовать слева от знака 
		// равенства: *MyMin(параметры) = 0;

	const int rc= 5;
	int array[rc];
	for (int i = 0; i < rc; i++) 
	{
		array[i] = rand() % 10;
	}
	for (int i = 0; i < rc; i++)
	{
		std::cout << array[i] << ' ';
	}
	std::cout << *myMin(array, rc);
	*myMin(array, rc) = 0;
	return 0;
}//main

